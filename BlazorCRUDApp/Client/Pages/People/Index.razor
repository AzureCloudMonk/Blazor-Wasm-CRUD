@page "/people"
@inject HttpClient http
@inject IJSRuntime js
@using System.IO
<h3>People</h3>

<AuthorizeView>
    <Authorized>
        <div class="form-group">
            <a class="btn btn-success" href="people/create">New Person</a>
        </div>
    </Authorized>
</AuthorizeView>

<GenericList Elements="people">
    <NullTemplate>
        <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" />
    </NullTemplate>
    <WithElementsTemplate>
        <table class="table">
            <thead>
                <tr>
                    <th></th>
                    <th>Id</th>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var person in people)
                {
                    <tr>
                        <td>
                            <AuthorizeView>
                                <Authorized>
                                    <a class="btn btn-success" href="people/edit/@person.Id">Edit</a>
                                    <button class="btn btn-danger" @onclick="@(() => DeletePerson(person.Id))">Delete</button>
                                </Authorized>
                            </AuthorizeView>
                        </td>
                        <td>@person.Id</td>
                        <td>@person.Name</td>
                    </tr>
                }
            </tbody>
        </table>

        <button @onclick="ExportAsCSV">Export as CSV</button>
    </WithElementsTemplate>
</GenericList>

@*<div>
    <GenericList Elements="people">
        <WithIndividualElementTemplate Context="person">
            <div class="card">
                <div class="card-body">
                    @person.Name
                </div>
            </div>
        </WithIndividualElementTemplate>
    </GenericList>
</div>*@

@code {
    List<Person> people { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPeople();
    }

    async Task LoadPeople()
    {
        //await Task.Delay(4000);
        people = await http.GetJsonAsync<List<Person>>("api/people");
    }

    async Task DeletePerson(int personId)
    {
        //await js.DisplayMessage("my title", "My message", SweetAlertMessageType.success);
        var personSelected = people.First(x => x.Id == personId);
        if (await js.Confirm("Confirm", $"Do you want to delete {personSelected.Name}?", SweetAlertMessageType.question))
        {
            await http.DeleteAsync($"api/people/{personId}");
            await LoadPeople();
        }
    }

    private void ExportAsCSV()
    {
        using (var memoryStream = new MemoryStream())
        {
            using (var writer = new StreamWriter(memoryStream))
            {
                using (var csv = new CsvHelper.CsvWriter(writer))
                {
                    csv.WriteRecords(people);
                }

                var arr = memoryStream.ToArray();
                js.SaveAs("people.csv", arr);
            }
        }
    }
}
